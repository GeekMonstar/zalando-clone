// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  cart          Cart[]
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Brand {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  collections Collection[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  Product Product[]
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  subname    String?
  description String?
  ages         Age[]
  mediaType   String?
  mediaSource String?
  mainColor   String?
  secondaryColor String?
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId     String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id           String      @id @default(cuid())
  name         String
  brand        Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId      String
  model        String
  category     Category
  type         Type
  description  Json[]
  price        Int
  image        String?
  gender       Gender
  ages          Age[]
  collection   Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  variants     Variant[]
  OrderItem    OrderItem[]
  CartItem     CartItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Variant {
  id               String      @id @default(cuid())
  productId        String
  name             String
  description      Json[]
  additionnalPrice Int
  images           String[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  sizes            Size[]
  OrderItem        OrderItem[]
  cartItem         CartItem[]

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Size {
  id        String   @id @default(cuid())
  name      SizeName
  variantId String
  stock     Int
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus
  total     Int
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  variantId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  variant Variant @relation(fields: [variantId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  variantId String
  quantity  Int
  size      SizeName
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum Age {
  BABY
  INFANT
  KID
  TEEN
  ADULT
}

enum SizeName {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  EU_28
  EU_29
  EU_30
  EU_31
  EU_32
  EU_33
  EU_34
  EU_35
  EU_36
  EU_37
  EU_38
  EU_39
  EU_40
  EU_41
  EU_42
  EU_43
  EU_44
  EU_45
  EU_46
  EU_47
  EU_48
  EU_49
  EU_50
}

enum Type {
  SHOES
  CLOTHES
  ACCESSORIES
  ELECTRONICS
  SPORT
  BEAUTY
}

enum Category {
  JACKET
  SHIRT
  TSHIRT
  SWEATSHIRT
  PANT
  SUIT
  DRESS
  BOOT
  SPORT
  SANDALS
  SNEAKERS
  SLIPPERS
  FLIPFLOP
  HEELS
  FLAT
  WEDGE
  BAG
}
